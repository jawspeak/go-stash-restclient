package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*
PullRequestActivity pull request activity

swagger:model PullRequestActivity
*/
type PullRequestActivity struct {

	/* Action action
	 */
	Action string `json:"action,omitempty"`

	/* Comment comment
	 */
	Comment *Comment `json:"comment,omitempty"`

	/* CreatedDatetime created datetime
	 */
	CreatedDatetime int64 `json:"createdDatetime,omitempty"`

	/* ID id
	 */
	ID int64 `json:"id,omitempty"`

	/* User user
	 */
	User *User `json:"user,omitempty"`
}

// Validate validates this pull request activity
func (m *PullRequestActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pullRequestActivityActionEnum []interface{}

func (m *PullRequestActivity) validateActionEnum(path, location string, value string) error {
	if pullRequestActivityActionEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["COMMENTED","OPENED","MERGED","APPROVED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			pullRequestActivityActionEnum = append(pullRequestActivityActionEnum, v)
		}
	}
	return validate.Enum(path, location, value, pullRequestActivityActionEnum)
}

func (m *PullRequestActivity) validateAction(formats strfmt.Registry) error {

	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}
