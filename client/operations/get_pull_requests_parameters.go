package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*GetPullRequestsParams contains all the parameters to send to the API endpoint
for the get pull requests operation typically these are written to a http.Request
*/
type GetPullRequestsParams struct {

	/*Limit
	  Probably defaults to 25. It is a best practice to check the limit attribute on the response to see what limit has been applied.

	*/
	Limit *int64
	/*Order
	  NEWEST is as in newest first.

	*/
	Order *string
	/*Project*/
	Project string
	/*Repo*/
	Repo string
	/*Role1*/
	Role1 *string
	/*Role2*/
	Role2 *string
	/*Start
	  The count of the result to start with, inclusive (I think).

	*/
	Start *int64
	/*State
	  You probably want to include this in, and probably as ALL to see everything (which you won't by default).

	*/
	State *string
	/*Username1*/
	Username1 *string
	/*Username2*/
	Username2 *string
}

// WriteToRequest writes these params to a swagger request
func (o *GetPullRequestsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param limit
	var qrLimit int64
	if o.Limit != nil {
		qrLimit = *o.Limit
	}
	qLimit := swag.FormatInt64(qrLimit)
	if err := r.SetQueryParam("limit", qLimit); err != nil {
		return err
	}

	// query param order
	var qrOrder string
	if o.Order != nil {
		qrOrder = *o.Order
	}
	qOrder := qrOrder
	if err := r.SetQueryParam("order", qOrder); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	// query param role.1
	var qrRole1 string
	if o.Role1 != nil {
		qrRole1 = *o.Role1
	}
	qRole1 := qrRole1
	if err := r.SetQueryParam("role.1", qRole1); err != nil {
		return err
	}

	// query param role.2
	var qrRole2 string
	if o.Role2 != nil {
		qrRole2 = *o.Role2
	}
	qRole2 := qrRole2
	if err := r.SetQueryParam("role.2", qRole2); err != nil {
		return err
	}

	// query param start
	var qrStart int64
	if o.Start != nil {
		qrStart = *o.Start
	}
	qStart := swag.FormatInt64(qrStart)
	if err := r.SetQueryParam("start", qStart); err != nil {
		return err
	}

	// query param state
	var qrState string
	if o.State != nil {
		qrState = *o.State
	}
	qState := qrState
	if err := r.SetQueryParam("state", qState); err != nil {
		return err
	}

	// query param username.1
	var qrUsername1 string
	if o.Username1 != nil {
		qrUsername1 = *o.Username1
	}
	qUsername1 := qrUsername1
	if err := r.SetQueryParam("username.1", qUsername1); err != nil {
		return err
	}

	// query param username.2
	var qrUsername2 string
	if o.Username2 != nil {
		qrUsername2 = *o.Username2
	}
	qUsername2 := qrUsername2
	if err := r.SetQueryParam("username.2", qUsername2); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
