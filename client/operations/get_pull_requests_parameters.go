package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*
GetPullRequestsParams contains all the parameters to send to the API endpoint
for the get pull requests operation typically these are written to a http.Request
*/
type GetPullRequestsParams struct {
	/*
	  Probably defaults to 25. It is a best practice to check the limit attribute on the response to see what limit has been applied.
	*/
	Limit *int64

	Project string

	Repo string

	Role1 *string

	Role2 *string
	/*
	  The count of the result to start with, inclusive (I think).
	*/
	Start *int64

	State *string

	Username1 *string

	Username2 *string
}

// WriteToRequest writes these params to a swagger request
func (o *GetPullRequestsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.Limit != nil {

		// query param limit
		if err := r.SetQueryParam("limit", swag.FormatInt64(*o.Limit)); err != nil {
			return err
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Role1 != nil {

		// query param role.1
		if err := r.SetQueryParam("role.1", *o.Role1); err != nil {
			return err
		}

	}

	if o.Role2 != nil {

		// query param role.2
		if err := r.SetQueryParam("role.2", *o.Role2); err != nil {
			return err
		}

	}

	if o.Start != nil {

		// query param start
		if err := r.SetQueryParam("start", swag.FormatInt64(*o.Start)); err != nil {
			return err
		}

	}

	if o.State != nil {

		// query param state
		if err := r.SetQueryParam("state", *o.State); err != nil {
			return err
		}

	}

	if o.Username1 != nil {

		// query param username.1
		if err := r.SetQueryParam("username.1", *o.Username1); err != nil {
			return err
		}

	}

	if o.Username2 != nil {

		// query param username.2
		if err := r.SetQueryParam("username.2", *o.Username2); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
