package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"
)

/*GetPullRequestActivitiesParams contains all the parameters to send to the API endpoint
for the get pull request activities operation typically these are written to a http.Request
*/
type GetPullRequestActivitiesParams struct {

	/*FromID
	  id of the activity item to use as the first item in the returned page

	*/
	FromID *int64
	/*FromType
	  (required if fromId is present) the type of the activity item specified by fromId (either COMMENT or ACTIVITY)

	*/
	FromType *string
	/*Limit
	  Probably defaults to 25. It is a best practice to check the limit attribute on the response to see what limit has been applied.

	*/
	Limit *int64
	/*Project*/
	Project string
	/*PullRequestID*/
	PullRequestID int64
	/*Repo*/
	Repo string
}

// WriteToRequest writes these params to a swagger request
func (o *GetPullRequestActivitiesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// query param fromId
	var qrFromID int64
	if o.FromID != nil {
		qrFromID = *o.FromID
	}
	qFromID := swag.FormatInt64(qrFromID)
	if err := r.SetQueryParam("fromId", qFromID); err != nil {
		return err
	}

	// query param fromType
	var qrFromType string
	if o.FromType != nil {
		qrFromType = *o.FromType
	}
	qFromType := qrFromType
	if err := r.SetQueryParam("fromType", qFromType); err != nil {
		return err
	}

	// query param limit
	var qrLimit int64
	if o.Limit != nil {
		qrLimit = *o.Limit
	}
	qLimit := swag.FormatInt64(qrLimit)
	if err := r.SetQueryParam("limit", qLimit); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param pullRequestId
	if err := r.SetPathParam("pullRequestId", swag.FormatInt64(o.PullRequestID)); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
